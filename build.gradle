plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.gsl'
version = '0.1.6-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springModulithVersion', "1.2.1")
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // JAXB for XML processing (may be unnecessary for Spring Boot 3+)
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'

    // Flyway for database migrations
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Spring Modulith for modular monolith architecture
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation 'org.springframework.modulith:spring-modulith-starter-jpa'

    // MapStruct for object mapping
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // Dotenv for environment variables management
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    // Lombok for reducing boilerplate code
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // JWT for handling authentication tokens
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // PostgreSQL driver for database connectivity
    runtimeOnly 'org.postgresql:postgresql'

    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    outputs.dir snippetsDir
    dependsOn startDockerContainer
    finalizedBy stopDockerContainer

    doFirst {
        println "Running tests..."
    }
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

task startDockerContainer(type: Exec) {
    description = 'Starts the Docker container for the test database'
    commandLine 'docker-compose', '-f', 'compose.yaml', 'up', '-d'

    doFirst {
        println "Starting Docker container..."
    }
}

task stopDockerContainer(type: Exec) {
    description = 'Stops and removes the Docker container after tests are complete'
    commandLine 'docker-compose', '-f', 'compose.yaml', 'down'

    doFirst {
        println "Stopping Docker container..."
    }
}

tasks.named('jar') {
    enabled = false
}

